sprotoc

  This is a lightweight C-code generator for Google protocol buffers.
It was created out of frustration with the requirement for using
auto-generated structs to hold pb-related metadata (len..., has..., etc.).
Other than default values, it doesn't support most field property
tags or other bells and whistles.

  The generated code only makes use of memory allocation (malloc) when
determining the size of the objects it is serializing.
For everything else, it creates temporary structures
to serialize from (to parse into) on the stack.
This allows you to use your own struct data definitions
and only send lightweight pointers back and forth with protocol
buffers.  It also means there is only a single copy (or none at all)
between the protocol buffer output / input and your actual data.

  The top-level calls are generated as, e.g.
uint8_t *[package]_[message]_to_string(
      size_t *len, MY_[package]_[message] *a)
and
MY_[package]_[message] *read_[package]_[message](
      const uint8_t **buf, ssize_t sz, void *info);
(info is optional, and passed for your use)

  To use this serialization method effectively requires writing
reader and writer functions for each message type
-- protord..., and protowr...
The writer has access to both your structure and protobuf's
generic structure (with variable names / types
auto-generated from the .proto file).  The reader
has access to protobuf's auto-generated structure and a user
pointer (used for malloc purposes).  It should return
a pointer to your structure.

  Of course, the messages can hold other messages.  To serialize
these, you need only fill that field of the protobuf structure
with a pointer to your own child structure (MY_...).
The library arranges the rest.

  On the read-side, the library parses children first so that
all the protobuf messages you read out already have your parsed
output data filled in.  Unfortunately, it is not currently
possible to skip parsing parts of a message.

  Example copy in/out functions can be generated for you.
To do this, pass the stubs parameter to sprotoc:
sprotoc --c_out=stubs=stub:. test1.proto
Building your copy functions by modifying these stubs
will save you from having to look up any of the naming conventions.

  One convention that deserves comment is the method of serializing 
fields with type "bytes".  These are serialized by filling in
the protobuf structure with 2 functions,
  typedef size_t (*lazy_writer)(SWriter *print, void *buf);
  typedef size_t (*lazy_size)(void *buf);
The writer is then only called when writes are actually needed.

the SWriter is defined in sprotoc.h, and is used like:
  print-&gt;write(print-&gt;stream, buf, len);
You can create a writer following the generated [message]_to_string,
functions.

